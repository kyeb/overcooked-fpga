# Python script to generate a TCL script that generates some BRAMs!

# usage: set parameters in this file, run `python generate_bram_generator.py`,
# then use `source autogenerate_bram.tcl` in Vivado

# SET THIS TO YOUR COMPUTER
basedir = "/home/kyeb/mit/6.111/final_project"
# basedir = "C:/Users/lacth/overcooked-fpga"
coedir = basedir + "/sprites"
srcsdir = basedir + "/fpga/vivado_project/vivado_project.srcs/sources_1/ip"

coes = [
    # name in vivado, file path (relative to sprites directory), port depth
    ("red_coe", "/red.coe", 256),
    ("blue_coe", "/blue.coe", 256),
    ("green_coe", "/green.coe", 256),
]

directions = ["up", "down", "right", "left"]
# # sprites that have 4 directions
sprites = [
    "chop",
    "chopped_onion",
    "empty_bowl",
    "empty_pot",
    "ext_off",
    "ext_on",
    "full_bowl",
    "move",
    "soup_pot",
    "onion"
    ]

for s in sprites:
    for d in directions:
        if s != "move" and d == "up":
            continue
        coes.append((f'{s}_{d}_coe', f'/{s}/{s}_{d}.coe', 1024))

table_sprites = ["onion", "chopped_onion", "empty_bowl", "full_bowl", 
    "empty_pot", "full_pot", "fire_pot", "fire", "extinguisher"]

for t in table_sprites:
    coes.append((f'{t}_coe', f'/{t}.coe', 1024))

f = open("autogenerate_bram.tcl", "w+")
f.write("### AUTOGENERATED from generate_bram_generator.py\n\n\n")

for coe in coes:
    name = coe[0]
    filename = coedir + coe[1]
    depth = coe[2]
    s = f'\
    \n{{ some stuff{name} }} {name}'
    s = f'\
### {name} \n\
create_ip -name blk_mem_gen -vendor xilinx.com -library ip -version 8.4 -module_name {name} \n\
set_property -dict [list CONFIG.Component_Name {{{name}}} CONFIG.Memory_Type {{Single_Port_ROM}} CONFIG.Write_Width_A {{8}} CONFIG.Write_Depth_A {{{depth}}} CONFIG.Read_Width_A {{8}} CONFIG.Enable_A {{Always_Enabled}} CONFIG.Write_Width_B {{8}} CONFIG.Read_Width_B {{8}} CONFIG.Load_Init_File {{true}} CONFIG.Coe_File {{{filename}}} CONFIG.Port_A_Write_Rate {{0}}] [get_ips {name}] \n\
generate_target {{instantiation_template}} [get_files {srcsdir}/{name}/{name}.xci] \n\
update_compile_order -fileset sources_1 \n\
generate_target all [get_files  {srcsdir}/{name}/{name}.xci] \n\
catch {{ config_ip_cache -export [get_ips -all {name}] }} \n\
export_ip_user_files -of_objects [get_files {srcsdir}/{name}/{name}.xci] -no_script -sync -force -quiet \n\
create_ip_run [get_files -of_objects [get_fileset sources_1] {srcsdir}/{name}/{name}.xci] \n\
launch_runs -jobs 1 {name}_synth_1 \n\
export_simulation -of_objects [get_files {srcsdir}/{name}/{name}.xci] -directory {basedir}/fpga/vivado_project/vivado_project.ip_user_files/sim_scripts -ip_user_files_dir {basedir}/fpga/vivado_project/vivado_project.ip_user_files -ipstatic_source_dir {basedir}/fpga/vivado_project/vivado_project.ip_user_files/ipstatic -lib_map_path [list {{modelsim={basedir}/fpga/vivado_project/vivado_project.cache/compile_simlib/modelsim}} {{questa={basedir}/fpga/vivado_project/vivado_project.cache/compile_simlib/questa}} {{ies={basedir}/fpga/vivado_project/vivado_project.cache/compile_simlib/ies}} {{xcelium={basedir}/fpga/vivado_project/vivado_project.cache/compile_simlib/xcelium}} {{vcs={basedir}/fpga/vivado_project/vivado_project.cache/compile_simlib/vcs}} {{riviera={basedir}/fpga/vivado_project/vivado_project.cache/compile_simlib/riviera}}] -use_ip_compiled_libs -force -quiet\n\
after 10000 \n\n' # wait 10 seconds between runs
    f.write(s)
    
f.close()
